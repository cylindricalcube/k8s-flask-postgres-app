apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: postgres-replica
    env: {{ .Values.env }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
  name: postgres-replica
spec:
  serviceName: "postgres-replica"
  replicas: 1
  selector:
    matchLabels:
      app: postgres-replica
  template:
    metadata:
      labels:
        app: postgres-replica
    spec:
      containers:
      - name: postgres-replica
        image: postgres:{{ .Chart.AppVersion }}
        #command: ['sh', '-c', 'sleep 100000']
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-replica-db-credentials
              key: pass
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-replica-db-credentials
              key: reppass
        envFrom:
          - configMapRef:
              name: postgres-replica-config
        ports:
        - containerPort: {{ .Values.postgres_replica.ss.containerPort }}
          # lol port names can't be longer than 15 chars.... 
          name: postgres-repl
        volumeMounts:
        - name: postgres-replica
          mountPath: {{ .Values.postgres_replica.ss.dataVolumeMountPath }}
          subPath: postgres-replica
      initContainers:
      - name: pg-basebackup
        image: postgres:{{ .Chart.AppVersion }}
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-replica-db-credentials
              key: reppass
        command:
        - sh
        - -c
        - |
          if [ -z "$(ls -A {{ .Values.postgres_replica.ss.dataVolumeMountPath }} )" ]; then
              echo "Running pg_basebackup to catch up replication server...";
              pg_basebackup -h {{ .Values.postgres_main.service.name }} -U {{ .Values.postgres_replica.repuser | quote }} -p {{ .Values.postgres_main.service.port | quote }} -D {{ .Values.postgres_main.ss.dataVolumeMountPath | quote }} -Fp -Xs -P -R;
              chown -R postgres:postgres {{ .Values.postgres_replica.ss.dataVolumeMountPath }};
          else
              echo "Skipping pg_basebackup because directory is not empty"; 
          fi
        volumeMounts:
        - name: postgres-replica
          mountPath: {{ .Values.postgres_replica.ss.dataVolumeMountPath }}
          subPath: postgres-replica
  volumeClaimTemplates:
  - metadata:
      name: postgres-replica
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.postgres_main.ss.storageClass }}
      resources:
        requests:
          storage: {{ .Values.postgres_main.ss.resources.req.storage }}